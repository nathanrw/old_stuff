from math import pi, atan,sin, cos, radians, degrees
from random import random

def Add2DVector(a,b):
	return [a[0]+b[0],a[1]+b[1]]

def Sub2DVector(a,b):
	return [a[0]-b[0],a[1]-b[1]]

def Mul2DVector(a,b):
	return [a[0]*b[0],a[1]*b[1]]

def Rotate2DVector(vec, angle, origin=[0,0]):
	""" Rotate a 2D vector of the form [x,y] by angle (in radians) about origin,
		which defaults to [0,0]. """
	
	sinval = sin(angle)
	cosval = cos(angle)
	
	A = vec[0]-origin[0]
	B = vec[1]-origin[1]
	
	return [A*cosval - B*sinval + origin[0], A*sinval + B*cosval + origin[1]]

def Magnitude2DVector(vec):
	""" Get the magnitude of a 2D vector of the form [x,y]. """
	return sqrt(vec[0]**2+vec[1]**2)

def Unit2DVector(vec):
	""" Get the direction of a 2D vector. """
	m = 1/Magnitude2DVector(vec)
	return [m*vec[0],m*vec[1]]

def Distance2DPoints2D(point1,point2):
	""" Get the distance between two 2D vectors of the form [x,y], in the form
		[x,y]. Well, ok, displacement. """
	return [point1[0]-point2[1],point1[1]-point2[1]]

def Distance1DPoints2D(point1,point2):
	""" Get the distance between two 2D vectors of the form [x,y], in the form
		D. """
	return Magnitude2DVector(Distance2DPoints2D(point1,point2))

def Noise(x):
	""" Some stolen pseudo-random number function. God knows why I'm using it,
		but, alas, I do not."""
	x = (x<<13) ^ x;
	return ( 1.0 - ( (x * (x * x * 15731 + 789221) + 1376312589) & 0x7fffffff) / 1073741824.0)

def MakeNoisyCircle(radius, numpoints, magnitude):
	""" Makes a circle and distorts the radius at different values of theta (n). """
	
	angleperpoint = 360.0/numpoints
	points = []
	for n in range(0,numpoints):
		rand = random()
		r = (Noise(int(n*rand*10))*magnitude + radius)
		points.append((r*cos(radians(n*angleperpoint)),r*sin(radians(n*angleperpoint))))
	return points

def check(a,b):
	a = a[1]
	b = b[1]
	if a - b > 0:
		return 1
	elif a - b == 0:
		return 0
	elif a - b < 0:
		return -1

pairs = []
circ = MakeNoisyCircle(20,10,5)
for point in circ:
	dist = Distance2DPoints2D(point, [0,0])
	angle = atan(dist[1]/dist[0])
	if angle < 0:
		angle = 2*pi - angle
	pairs.append([point, angle])
points = []
pairs.sort(check)
for pair in pairs:
	print pair[1]